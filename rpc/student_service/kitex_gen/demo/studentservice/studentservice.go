// Code generated by Kitex v0.6.1. DO NOT EDIT.

package studentservice

import (
	"context"
	demo "github.com/SchrodingerwithCat/apiGateway/rpc/student_service/kitex_gen/demo"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return studentServiceServiceInfo
}

var studentServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "StudentService"
	handlerType := (*demo.StudentService)(nil)
	methods := map[string]kitex.MethodInfo{
		"StuRegister": kitex.NewMethodInfo(stuRegisterHandler, newStudentServiceStuRegisterArgs, newStudentServiceStuRegisterResult, false),
		"StuQuery":    kitex.NewMethodInfo(stuQueryHandler, newStudentServiceStuQueryArgs, newStudentServiceStuQueryResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "demo",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func stuRegisterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*demo.StudentServiceStuRegisterArgs)
	realResult := result.(*demo.StudentServiceStuRegisterResult)
	success, err := handler.(demo.StudentService).StuRegister(ctx, realArg.Student)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newStudentServiceStuRegisterArgs() interface{} {
	return demo.NewStudentServiceStuRegisterArgs()
}

func newStudentServiceStuRegisterResult() interface{} {
	return demo.NewStudentServiceStuRegisterResult()
}

func stuQueryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*demo.StudentServiceStuQueryArgs)
	realResult := result.(*demo.StudentServiceStuQueryResult)
	success, err := handler.(demo.StudentService).StuQuery(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newStudentServiceStuQueryArgs() interface{} {
	return demo.NewStudentServiceStuQueryArgs()
}

func newStudentServiceStuQueryResult() interface{} {
	return demo.NewStudentServiceStuQueryResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) StuRegister(ctx context.Context, student *demo.Student) (r *demo.RegisterResp, err error) {
	var _args demo.StudentServiceStuRegisterArgs
	_args.Student = student
	var _result demo.StudentServiceStuRegisterResult
	if err = p.c.Call(ctx, "StuRegister", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) StuQuery(ctx context.Context, req *demo.QueryReq) (r *demo.Student, err error) {
	var _args demo.StudentServiceStuQueryArgs
	_args.Req = req
	var _result demo.StudentServiceStuQueryResult
	if err = p.c.Call(ctx, "StuQuery", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
