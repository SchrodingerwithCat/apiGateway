// Code generated by hertz generator.

package gateway

import (
	"context"
	"errors"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	gateway "hertz.demo/biz/model/gateway"
	"sync"
)

// ServiceNameMap global var
var ServiceNameMap = make(map[string]gateway.Service)

var mapMutex = &sync.Mutex{}
var ioMutex = &sync.Mutex{}

// AddService .
// @router /add-service [POST]
func AddService(ctx context.Context, c *app.RequestContext) {
	var err error
	var req gateway.Service
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	mapMutex.Lock()
	defer mapMutex.Unlock()
	if _, ok := ServiceNameMap[req.ServiceName]; !ok {
		ServiceNameMap[req.ServiceName] = req
	}

	resp := &gateway.SuccessResp{
		Success: true,
		Message: "Add " + req.ServiceName + " success",
	}
	c.JSON(consts.StatusOK, resp)
}

// DeleteService .
// @router /delete-service [POST]
func DeleteService(ctx context.Context, c *app.RequestContext) {
	var err error
	var req gateway.ServiceReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	mapMutex.Lock()
	defer mapMutex.Unlock()
	delete(ServiceNameMap, req.ServiceName)

	resp := &gateway.SuccessResp{
		Success: true,
		Message: "Delete " + req.ServiceName + " success",
	}
	c.JSON(consts.StatusOK, resp)
}

// UpdateService .
// @router /update-service [POST]
func UpdateService(ctx context.Context, c *app.RequestContext) {
	var err error
	var req gateway.Service
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	mapMutex.Lock()
	defer mapMutex.Unlock()
	if _, ok := ServiceNameMap[req.ServiceName]; ok {
		ServiceNameMap[req.ServiceName] = req
	}

	resp := &gateway.SuccessResp{
		Success: true,
		Message: "Update " + req.ServiceName + " success",
	}

	c.JSON(consts.StatusOK, resp)
}

// GetService .
// @router /get-service [POST]
func GetService(ctx context.Context, c *app.RequestContext) {
	var err error
	var req gateway.ServiceReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	mapMutex.Lock()
	defer mapMutex.Unlock()
	service, ok := ServiceNameMap[req.ServiceName]
	if !ok {
		err := errors.New("service not found")
		panic(err)
	}

	c.JSON(consts.StatusOK, &service)
}

// ListService .
// @router /list-service [POST]
func ListService(ctx context.Context, c *app.RequestContext) {
	var err error
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	mapMutex.Lock()
	defer mapMutex.Unlock()

	var services []*gateway.Service
	for k := range ServiceNameMap {
		service := ServiceNameMap[k]
		services = append(services, &service)
	}

	c.JSON(consts.StatusOK, &services)
}
